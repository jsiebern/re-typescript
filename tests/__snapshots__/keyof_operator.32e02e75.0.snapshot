keyof operator â€º throws for non object types
module Test = {
  module Kof: {
    type t;
    let number: float => t;
    let toString: t;
    let charAt: t;
    let charCodeAt: t;
    let concat: t;
    let indexOf: t;
    let lastIndexOf: t;
    let localeCompare: t;
    let match: t;
    let replace: t;
    let search: t;
    let slice: t;
    let split: t;
    let substring: t;
    let toLowerCase: t;
    let toLocaleLowerCase: t;
    let toUpperCase: t;
    let toLocaleUpperCase: t;
    let trim: t;
    let length: t;
    let substr: t;
    let valueOf: t;
  } = {
    [@unboxed]
    type t =
      | Any('a): t;
    let number = (v: float) => Any(v);
    let toString = Any(\"toString\");
    let charAt = Any(\"charAt\");
    let charCodeAt = Any(\"charCodeAt\");
    let concat = Any(\"concat\");
    let indexOf = Any(\"indexOf\");
    let lastIndexOf = Any(\"lastIndexOf\");
    let localeCompare = Any(\"localeCompare\");
    let match = Any(\"match\");
    let replace = Any(\"replace\");
    let search = Any(\"search\");
    let slice = Any(\"slice\");
    let split = Any(\"split\");
    let substring = Any(\"substring\");
    let toLowerCase = Any(\"toLowerCase\");
    let toLocaleLowerCase = Any(\"toLocaleLowerCase\");
    let toUpperCase = Any(\"toUpperCase\");
    let toLocaleUpperCase = Any(\"toLocaleUpperCase\");
    let trim = Any(\"trim\");
    let length = Any(\"length\");
    let substr = Any(\"substr\");
    let valueOf = Any(\"valueOf\");
  };
  type kof = Kof.t;
};

