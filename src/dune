(library
 (name re_typescript_lib)
 (public_name re_typescript.lib)
 (ocamlopt_flags -linkall -g)
 (js_of_ocaml
  (flags --pretty --source-map))
 (libraries gen_js_api js_of_ocaml reason console.lib containers
   ocaml-migrate-parsetree ppx_tools_versioned yojson)
 (modules
  (:standard \ Re_typescript_exec))
 (preprocess
  (pps gen_js_api.ppx js_of_ocaml-ppx ppx_tools_versioned.metaquot_406)))

(executable
 (name re_typescript_exec)
 (ocamlopt_flags -linkall -g)
 (js_of_ocaml
  (flags --pretty --source-map))
 (libraries js_of_ocaml console.lib re_typescript.lib)
 (modules re_typescript_exec)
 (preprocess
  (pps gen_js_api.ppx js_of_ocaml-ppx ppx_tools_versioned.metaquot_406))
 (modes js))

(rule
 (targets ts_raw.ml ts_morph.ml ts_nodes.ml)
 (deps ts_raw.rei ts_morph.rei ts_nodes.rei)
 (action
  (progn
   (bash "refmt --interface=true --print=ml ts_raw.rei > temp_raw.ml")
   (bash "refmt --interface=true --print=ml ts_morph.rei > ts_morph.ml")
   (bash "refmt --interface=true --print=ml ts_nodes.rei > ts_nodes.ml")
   (bash "rm ts_raw.rei")
   (bash "rm ts_morph.rei")
   (bash "rm ts_nodes.rei")
   (bash "mv temp_raw.ml ts_raw.mli")
   (bash "mv ts_morph.ml ts_morph.mli")
   (bash "mv ts_nodes.ml ts_nodes.mli")
   (bash "%{bin:gen_js_api} ts_raw.mli")
   (bash "%{bin:gen_js_api} ts_morph.mli")
   (bash "%{bin:gen_js_api} ts_nodes.mli"))))
